#include "Wire.h" // For I2C communication
#include "LCD.h" // For LCD
#include "LiquidCrystal_I2C.h" // For I2C LCD display
#include "Adafruit_Keypad.h" // keypad library for arduino
#define KEYPAD_PID3844 // define the 4x4 matrix keypad

#define R1    5     //connected pin 5 of arduino with pin 1 of ROW1
#define R2    4     //connected pin 4 of arduino with pin 2 of ROW2
#define R3    3     //connected pin 3 of arduino with pin 3 of ROW3
#define R4    2     //connected pin 2 of arduino with pin 4 of ROW4
#define C1    9     //connected pin 9 of arduino with pin 1 of COLUMN1
#define C2    8     //connected pin 8 of arduino with pin 2 of COLUMN2
#define C3    7     //connected pin 7 of arduino with pin 3 of COLUMN3
#define C4    6     //connected pin 6 of arduino with pin 4 of COLUMN4
// leave this import after the above configuration
#include "keypad_config.h" // for keypad configuration
Adafruit_Keypad customKeypad = Adafruit_Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS);
LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7); // 0x27 is the default I2C bus address of the backpack

int max_attempts =3; // define the no. of password attempts
int attempts =0; // initially 0

void setup() {
  Serial.begin(9600); // serial baud rate
  customKeypad.begin();
  
  // Set off LCD module
  lcd.begin (20, 4); // 20x4 LCD module
  lcd.setBacklightPin(3, POSITIVE); // BL, BL_POL  
  lcd.setBacklight(HIGH); //to set the backlight

  lcd.setCursor(0, 0); // setting the writing position
  lcd.print(" Welcome to Garage"); // print on the LCD screen
  lcd.setCursor(0, 1); // setting the writing position
  lcd.print(" Monitoring System."); // print on the LCD
  lcd.setCursor(0, 2); // setting the writing position
  delay(5000); // delay operation
  lcd.clear(); // clear the screen
  lcd.setCursor(0,0);  // setting the writing position with row and column position
  lcd.print("Enter Code:-"); // Enter the password
  lcd.setCursor(0, 1); // to move the cursor
  lcd.print("    "); // print on LCD
  
  
}

char GetKey;  //declaration for characters 
char KEY[4] = {'1', '2', '3', '4'}; // Array declaration 
char Check[4]; 
int c = 0; //  set initial value 0 

void loop() // loop begins

  if (c == 1)  //  if integer c is 1
  {
    lcd.setCursor(0, 1); // first row of lcd
    lcd.print(GetKey); // print on the LCD 
    Check[0] = GetKey; //entered value assigns to the array address 0
  }
  else if (c == 2)  
  {
    lcd.setCursor(1, 1); // first row second column of lcd
    lcd.print(GetKey); // print on LCD
    Check[1] = GetKey; // value assign to the array address 1
  }
  else if (c == 3)
  {
    lcd.setCursor(2, 1); // first row third column of LCD
    lcd.print(GetKey); // print on the LCD
    Check[2] = GetKey; // value assign to the array address 2
  }
  else if (c == 4)
  {
    lcd.setCursor(3, 1); // first row fourth column of LCD
    lcd.print(GetKey); // print on the LCD
    Check[3] = GetKey; // value assign to the array address 3

    c = 0;
    if (Check[0] == KEY[0] && Check[1] == KEY[1] && Check[2] == KEY[2] && Check[3] == KEY[3]) // if entered values are same
    {

      lcd.setCursor(0, 1); 
      lcd.print("       "); 
      lcd.setCursor(0, 2); // second row of LCD
      lcd.print("Door Open"); // print Door Open on the LCD
      lcd.setCursor(0, 1); 
      lcd.print("       ");
    }
    else {
        
        attempts=attempts+1; // if attempts exceeds more than 3
        if (attempts >= max_attempts)
        {
          lcd.clear(); // clear the LCD
          lcd.setCursor(0,2);
          lcd.print("Alert send"); // alert notification send 
          delay(5000); // delay operation
          attempts=0;
          }
        lcd.setCursor(0, 2);
        lcd.print("Wrong Password"); // print wrong password
        lcd.setCursor(0, 3);
        lcd.print("Max 3 attempts"); //print maximum 3 attempts on LCD
        delay(5000); // delay operation 
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("Enter Code:-"); //again ask for password
        lcd.setCursor(0, 1);
        lcd.print("    ");
    }
  }

  customKeypad.tick();
  while (customKeypad.available()) // continuous loop begins
  {
    keypadEvent e = customKeypad.read(); //read the keypad entry
    Serial.print((char)e.bit.KEY);
    if (e.bit.EVENT == KEY_JUST_PRESSED) // if condition starts
    {
      Serial.println(" pressed"); // shows pressed status
      GetKey = (char)e.bit.KEY; // character key
      if (GetKey == 'D') // if key is D (alpha numeric key)
      {
        lcd.setCursor(0, 3);
        lcd.print("       ");
        lcd.setCursor(0, 3);
        lcd.print("DOOR CLOSING"); // print Door closing on the LCD
        delay(2000); //delay operation
         lcd.setCursor(0, 3);
        lcd.print("       ");
      }
      else c++;
    }
    else if (e.bit.EVENT == KEY_JUST_RELEASED) Serial.println(" released"); // key released
  }
}



Keypad_config.h

// This file contains predefined setup for various Adafruit Matrix Keypads.
#ifndef __KEYPAD_CONFIG_H__
#define __KEYPAD_CONFIG_H__

#if defined(KEYPAD_PID3844)
const byte ROWS = 4; // four rows
const byte COLS = 4; // four columns
// define the symbols on the buttons of the keypads
char keys[ROWS][COLS] = {{'1', '2', '3', 'A'},
                         {'4', '5', '6', 'B'},
                         {'7', '8', '9', 'C'},
                         {'*', '0', '#', 'D'}};
byte rowPins[ROWS] = {R1, R2, R3,
                      R4}; // connect to the row pinouts of the keypad
byte colPins[COLS] = {C1, C2, C3,
                      C4}; // connect to the column pinouts of the keypad
#endif

#if defined(KEYPAD_PID1824) || defined(KEYPAD_PID3845) || defined(KEYPAD_PID419)
const byte ROWS = 4; // rows
const byte COLS = 3; // columns
// define the symbols on the buttons of the keypads
char keys[ROWS][COLS] = {
    {'1', '2', '3'}, {'4', '5', '6'}, {'7', '8', '9'}, {'*', '0', '#'}};
byte rowPins[ROWS] = {R1, R2, R3,
                      R4};         // connect to the row pinouts of the keypad
byte colPins[COLS] = {C1, C2, C3}; // connect to the column pinouts of the
                                   // keypad
#endif

#if defined(KEYPAD_PID1332)
const byte ROWS = 1; // rows
const byte COLS = 4; // columns
// define the symbols on the buttons of the keypads
char keys[ROWS][COLS] = {
    {'1', '2', '3', '4'},
};
byte rowPins[ROWS] = {R1}; // connect to the row pinouts of the keypad
byte colPins[COLS] = {C1, C2, C3,
                      C4}; // connect to the column pinouts of the keypad
#endif

#endif
